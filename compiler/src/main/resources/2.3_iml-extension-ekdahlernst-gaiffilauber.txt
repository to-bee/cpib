- dispDiagnosis result;
val it = () : unit
- dispMM result;
- dispMM result;
<program>
  leftToken PROGRAM
    PROGRAM IDENT <progamParameterList> <optionalGlobalDeclarations> DO <blockCmd> ENDPROGRAM
<blockCmd>
  leftToken DEBUGOUT
    <cmd> <repeatingOptionalCmds>
  leftToken DEBUGIN
    <cmd> <repeatingOptionalCmds>
  leftToken CALL
    <cmd> <repeatingOptionalCmds>
  leftToken WHILE
    <cmd> <repeatingOptionalCmds>
  leftToken IF
    <cmd> <repeatingOptionalCmds>
  leftToken IMAGINARY_PART
    <cmd> <repeatingOptionalCmds>
  leftToken REAL
    <cmd> <repeatingOptionalCmds>
  leftToken IMAG
    <cmd> <repeatingOptionalCmds>
  leftToken LPAREN
    <cmd> <repeatingOptionalCmds>
  leftToken ADDOPR
    <cmd> <repeatingOptionalCmds>
  leftToken NOT
    <cmd> <repeatingOptionalCmds>
  leftToken IDENT
    <cmd> <repeatingOptionalCmds>
  leftToken LITERAL
    <cmd> <repeatingOptionalCmds>
  leftToken SKIP
    <cmd> <repeatingOptionalCmds>
<cmd>
  leftToken SKIP
    SKIP
  leftToken IMAGINARY_PART
    <expression> BECOMES <expression>
  leftToken REAL
    <expression> BECOMES <expression>
  leftToken IMAG
    <expression> BECOMES <expression>
  leftToken LPAREN
    <expression> BECOMES <expression>
  leftToken ADDOPR
    <expression> BECOMES <expression>
  leftToken NOT
    <expression> BECOMES <expression>
  leftToken IDENT
    <expression> BECOMES <expression>
  leftToken LITERAL
    <expression> BECOMES <expression>
  leftToken IF
    IF <expression> THEN <blockCmd> ELSE <blockCmd> ENDIF
  leftToken WHILE
    WHILE <expression> DO <blockCmd> ENDWHILE
  leftToken CALL
    CALL IDENT <expressionList> <optionalGlobalInits>
  leftToken DEBUGIN
    DEBUGIN <expression>
  leftToken DEBUGOUT
    DEBUGOUT <expression>
<optionalGlobalInits>
  leftToken ENDPROC

  leftToken ENDFUN

  leftToken ENDWHILE

  leftToken ENDIF

  leftToken ELSE

  leftToken ENDPROGRAM

  leftToken SEMICOLON

  leftToken INIT
    INIT <idents>
<idents>
  leftToken IDENT
    IDENT <repeatingOptionalIdents>
<repeatingOptionalIdents>
  leftToken ENDPROC

  leftToken ENDFUN

  leftToken ENDWHILE

  leftToken ENDIF

  leftToken ELSE

  leftToken ENDPROGRAM

  leftToken SEMICOLON

  leftToken COMMA
    COMMA IDENT <idents>
<repeatingOptionalCmds>
  leftToken ENDPROC

  leftToken ENDFUN

  leftToken ENDWHILE

  leftToken ENDIF

  leftToken ELSE

  leftToken ENDPROGRAM

  leftToken SEMICOLON
    SEMICOLON <cmd> <repeatingOptionalCmds>
<declaration>
  leftToken IDENT
    <storageDeclaration>
  leftToken CHANGEMODE
    <storageDeclaration>
  leftToken FUN
    <functionDeclaration>
  leftToken PROC
    <procedureDeclaration>
<storageDeclaration>
  leftToken IDENT
    <optionalCHANGEMODE> <typedIdent>
  leftToken CHANGEMODE
    <optionalCHANGEMODE> <typedIdent>
<optionalCHANGEMODE>
  leftToken IDENT

  leftToken CHANGEMODE
    CHANGEMODE
<optionalFLOWMODE>
  leftToken MECHMODE

  leftToken IDENT

  leftToken CHANGEMODE

  leftToken FLOWMODE
    FLOWMODE
<optionalMECHMODE>
  leftToken IDENT

  leftToken CHANGEMODE

  leftToken MECHMODE
    MECHMODE
<typedIdent>
  leftToken IDENT
    IDENT COLON <typeDeclaration>
<typeDeclaration>
  leftToken TYPE
    TYPE
  leftToken LPAREN
    LPAREN <subTypeDeclaration> COMMA <subTypeDeclaration> <optionalTypeDeclaration> RPAREN
  leftToken IDENT
    IDENT
<subTypeDeclaration>
  leftToken TYPE
    TYPE
  leftToken LPAREN
    LPAREN <subTypeDeclaration> COMMA <subTypeDeclaration> <optionalTypeDeclaration> RPAREN
<optionalTypeDeclaration>
  leftToken RPAREN

  leftToken COMMA
    COMMA <subTypeDeclaration>
<functionDeclaration>
  leftToken FUN
    FUN IDENT <parameterList> RETURNS <storageDeclaration> <optionalGlobalImports> <optionalLocalStorageDeclarations> DO <blockCmd> ENDFUN
<procedureDeclaration>
  leftToken PROC
    PROC IDENT <parameterList> <optionalGlobalImports> <optionalLocalStorageDeclarations> DO <blockCmd> ENDPROC
<optionalGlobalImports>
  leftToken DO

  leftToken LOCAL

  leftToken GLOBAL
    GLOBAL <globalImport> <repeatingOptionalGlobalImports>
<globalImport>
  leftToken IDENT
    <optionalFLOWMODE> <optionalCHANGEMODE> IDENT
  leftToken CHANGEMODE
    <optionalFLOWMODE> <optionalCHANGEMODE> IDENT
  leftToken FLOWMODE
    <optionalFLOWMODE> <optionalCHANGEMODE> IDENT
<repeatingOptionalGlobalImports>
  leftToken DO

  leftToken LOCAL

  leftToken COMMA
    COMMA <globalImport> <repeatingOptionalGlobalImports>
<progamParameterList>
  leftToken LPAREN
    LPAREN <optionalProgramParameters> RPAREN
<optionalProgramParameters>
  leftToken RPAREN

  leftToken IDENT
    <optionalFLOWMODE> <optionalCHANGEMODE> <typedIdent> <repeatingOptionalProgramParameters>
  leftToken CHANGEMODE
    <optionalFLOWMODE> <optionalCHANGEMODE> <typedIdent> <repeatingOptionalProgramParameters>
  leftToken FLOWMODE
    <optionalFLOWMODE> <optionalCHANGEMODE> <typedIdent> <repeatingOptionalProgramParameters>
<repeatingOptionalProgramParameters>
  leftToken RPAREN

  leftToken COMMA
    COMMA <optionalFLOWMODE> <optionalCHANGEMODE> <typedIdent> <repeatingOptionalProgramParameters>
<optionalGlobalDeclarations>
  leftToken DO

  leftToken GLOBAL
    GLOBAL <declarations>
<declarations>
  leftToken PROC
    <declaration> <repeatingOptionalDeclarations>
  leftToken FUN
    <declaration> <repeatingOptionalDeclarations>
  leftToken IDENT
    <declaration> <repeatingOptionalDeclarations>
  leftToken CHANGEMODE
    <declaration> <repeatingOptionalDeclarations>
<repeatingOptionalDeclarations>
  leftToken DO

  leftToken SEMICOLON
    SEMICOLON <declaration> <repeatingOptionalDeclarations>
<optionalLocalStorageDeclarations>
  leftToken DO

  leftToken LOCAL
    LOCAL <storageDeclaration> <repeatingOptionalStorageDeclarations>
<repeatingOptionalStorageDeclarations>
  leftToken DO

  leftToken SEMICOLON
    SEMICOLON <storageDeclaration> <repeatingOptionalStorageDeclarations>
<parameterList>
  leftToken LPAREN
    LPAREN <optionalParameters> RPAREN
<optionalParameters>
  leftToken RPAREN

  leftToken IDENT
    <parameter> <repeatingOptionalParameters>
  leftToken CHANGEMODE
    <parameter> <repeatingOptionalParameters>
  leftToken MECHMODE
    <parameter> <repeatingOptionalParameters>
  leftToken FLOWMODE
    <parameter> <repeatingOptionalParameters>
<parameter>
  leftToken IDENT
    <optionalFLOWMODE> <optionalMECHMODE> <storageDeclaration>
  leftToken CHANGEMODE
    <optionalFLOWMODE> <optionalMECHMODE> <storageDeclaration>
  leftToken MECHMODE
    <optionalFLOWMODE> <optionalMECHMODE> <storageDeclaration>
  leftToken FLOWMODE
    <optionalFLOWMODE> <optionalMECHMODE> <storageDeclaration>
<repeatingOptionalParameters>
  leftToken RPAREN

  leftToken COMMA
    COMMA <parameter> <repeatingOptionalParameters>
<expressionList>
  leftToken LPAREN
    LPAREN <optionalExpressions> RPAREN
<optionalExpressions>
  leftToken RPAREN

  leftToken IMAGINARY_PART
    <expression> <repeatingOptionalExpressions>
  leftToken REAL
    <expression> <repeatingOptionalExpressions>
  leftToken IMAG
    <expression> <repeatingOptionalExpressions>
  leftToken LPAREN
    <expression> <repeatingOptionalExpressions>
  leftToken ADDOPR
    <expression> <repeatingOptionalExpressions>
  leftToken NOT
    <expression> <repeatingOptionalExpressions>
  leftToken IDENT
    <expression> <repeatingOptionalExpressions>
  leftToken LITERAL
    <expression> <repeatingOptionalExpressions>
<expression>
  leftToken IMAGINARY_PART
    <term1> <repBOOLOPRterm1>
  leftToken REAL
    <term1> <repBOOLOPRterm1>
  leftToken IMAG
    <term1> <repBOOLOPRterm1>
  leftToken LPAREN
    <term1> <repBOOLOPRterm1>
  leftToken ADDOPR
    <term1> <repBOOLOPRterm1>
  leftToken NOT
    <term1> <repBOOLOPRterm1>
  leftToken IDENT
    <term1> <repBOOLOPRterm1>
  leftToken LITERAL
    <term1> <repBOOLOPRterm1>
<repeatingOptionalExpressions>
  leftToken RPAREN

  leftToken COMMA
    COMMA <expression> <repeatingOptionalExpressions>
<repBOOLOPRterm1>
  leftToken RPAREN

  leftToken COMMA

  leftToken DO

  leftToken THEN

  leftToken ENDPROC

  leftToken ENDFUN

  leftToken ENDWHILE

  leftToken ENDIF

  leftToken ELSE

  leftToken ENDPROGRAM

  leftToken SEMICOLON

  leftToken BECOMES

  leftToken BOOLOPR
    BOOLOPR <term1> <repBOOLOPRterm1>
<term1>
  leftToken IMAGINARY_PART
    <term2> <repRELOPRterm2>
  leftToken REAL
    <term2> <repRELOPRterm2>
  leftToken IMAG
    <term2> <repRELOPRterm2>
  leftToken LPAREN
    <term2> <repRELOPRterm2>
  leftToken ADDOPR
    <term2> <repRELOPRterm2>
  leftToken NOT
    <term2> <repRELOPRterm2>
  leftToken IDENT
    <term2> <repRELOPRterm2>
  leftToken LITERAL
    <term2> <repRELOPRterm2>
<repRELOPRterm2>
  leftToken RPAREN

  leftToken COMMA

  leftToken DO

  leftToken THEN

  leftToken ENDPROC

  leftToken ENDFUN

  leftToken ENDWHILE

  leftToken ENDIF

  leftToken ELSE

  leftToken ENDPROGRAM

  leftToken SEMICOLON

  leftToken BECOMES

  leftToken BOOLOPR

  leftToken RELOPR
    RELOPR <term2> <repRELOPRterm2>
<term2>
  leftToken IMAGINARY_PART
    <term3> <repADDOPRterm3>
  leftToken REAL
    <term3> <repADDOPRterm3>
  leftToken IMAG
    <term3> <repADDOPRterm3>
  leftToken LPAREN
    <term3> <repADDOPRterm3>
  leftToken ADDOPR
    <term3> <repADDOPRterm3>
  leftToken NOT
    <term3> <repADDOPRterm3>
  leftToken IDENT
    <term3> <repADDOPRterm3>
  leftToken LITERAL
    <term3> <repADDOPRterm3>
<repADDOPRterm3>
  leftToken ADDOPR
    ADDOPR <term3> <repADDOPRterm3>
  leftToken RPAREN

  leftToken COMMA

  leftToken DO

  leftToken THEN

  leftToken ENDPROC

  leftToken ENDFUN

  leftToken ENDWHILE

  leftToken ENDIF

  leftToken ELSE

  leftToken ENDPROGRAM

  leftToken SEMICOLON

  leftToken BECOMES

  leftToken BOOLOPR

  leftToken RELOPR

<term3>
  leftToken IMAGINARY_PART
    <factor> <repMULTOPRfactor>
  leftToken REAL
    <factor> <repMULTOPRfactor>
  leftToken IMAG
    <factor> <repMULTOPRfactor>
  leftToken LPAREN
    <factor> <repMULTOPRfactor>
  leftToken ADDOPR
    <factor> <repMULTOPRfactor>
  leftToken NOT
    <factor> <repMULTOPRfactor>
  leftToken IDENT
    <factor> <repMULTOPRfactor>
  leftToken LITERAL
    <factor> <repMULTOPRfactor>
<repMULTOPRfactor>
  leftToken RPAREN

  leftToken COMMA

  leftToken DO

  leftToken THEN

  leftToken ENDPROC

  leftToken ENDFUN

  leftToken ENDWHILE

  leftToken ENDIF

  leftToken ELSE

  leftToken ENDPROGRAM

  leftToken SEMICOLON

  leftToken BECOMES

  leftToken BOOLOPR

  leftToken RELOPR

  leftToken ADDOPR

  leftToken MULTOPR
    MULTOPR <factor> <repMULTOPRfactor>
<factor>
  leftToken LITERAL
    LITERAL
  leftToken IDENT
    IDENT <optionalIdent>
  leftToken ADDOPR
    <monadicOperator> <factor>
  leftToken NOT
    <monadicOperator> <factor>
  leftToken LPAREN
    LPAREN <expression> <repeatingOptionalExpressions> RPAREN
  leftToken IMAG
    <complImag>
  leftToken REAL
    <complReal>
  leftToken IMAGINARY_PART
    IMAGINARY_PART
<optionalIdent>
  leftToken RPAREN

  leftToken COMMA

  leftToken DO

  leftToken THEN

  leftToken ENDPROC

  leftToken ENDFUN

  leftToken ENDWHILE

  leftToken ENDIF

  leftToken ELSE

  leftToken ENDPROGRAM

  leftToken SEMICOLON

  leftToken BECOMES

  leftToken BOOLOPR

  leftToken RELOPR

  leftToken ADDOPR

  leftToken MULTOPR

  leftToken INIT
    INIT
  leftToken LPAREN
    <expressionList>
<monadicOperator>
  leftToken NOT
    NOT
  leftToken ADDOPR
    ADDOPR
<complImag>
  leftToken IMAG
    IMAG LPAREN <expression> RPAREN
<complReal>
  leftToken REAL
    REAL LPAREN <expression> RPAREN
val it = () : unit
-